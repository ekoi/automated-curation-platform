from __future__ import annotations

import json
from typing import List, Optional

from pydantic import BaseModel, Field


# exit(2)

# def replace_keys(json_object):
#     if isinstance(json_object, dict):
#         new_dict = {}
#         for key, value in json_object.items():
#             new_key = key.replace('_', '-')
#             new_value = replace_keys(value)
#             new_dict[new_key] = new_value
#         return new_dict
#     elif isinstance(json_object, list):
#         return [replace_keys(item) for item in json_object]
#     else:
#         return json_object


class TransformedMetadatum(BaseModel):
    name: str
    transformer_url: Optional[str] = Field(None, alias='transformer-url')
    target: Optional[str] = None
    mimetype: Optional[str] = None
    restricted: Optional[bool] = None


class Metadata(BaseModel):
    specification: List[str]
    transformed_metadata: List[TransformedMetadatum] = Field(
        ..., alias='transformed-metadata'
    )


class Target(BaseModel):
    repo_name: str = Field(..., alias='repo-name')
    repo_display_name: str = Field(..., alias='repo-display-name')
    bridge_module_class: str = Field(..., alias='bridge-module-class')
    base_url: str = Field(..., alias='base-url')
    target_url: str = Field(..., alias='target-url')
    username: str
    password: str
    metadata: Metadata


class FileConversion(BaseModel):
    origin_type: str = Field(..., alias='origin-type')
    target_type: str = Field(..., alias='target-type')
    conversion_url: str = Field(..., alias='conversion-url')


class Model(BaseModel):
    assistant_config_name: str = Field(..., alias='assistant-config-name')
    description: str
    app_name: str = Field(..., alias='app-name')
    app_config_url: str = Field(..., alias='app-config-url')
    targets: List[Target]
    file_conversions: List[FileConversion] = Field(..., alias='file-conversions')

    file_conversions: Optional[List[FileConversionItem]] = Field(None, alias='file-conversions')

json_data_swh = {
    "assistant-config-name": "new-swh_dev-dataverse_local",
    "description": "",
    "app-name": "faircore4eosc",
    "app-config-url": "https://",
    "targets": [
        {
            "target-repo-name": "swh-staging-api",
            "target-repo-display-name": "Software Heritage - API",
            "bridge-module-class": "SwhApiIngester",
            "base-url": "https://webapp.staging.swh.network",
            "target-url": "https://webapp.staging.swh.network/api/1/origin/save/git/url/",
            "username": "access_token",
            "password": ""
        },
        {
            "target-repo-name": "dataverse-dev",
            "target-repo-display-name": "Dataverse EOSC",
            "bridge-module-class": "DataverseIngester",
            "base-url": "http://localhost:8080",
            "target-url": "http://localhost:8080/api/dataverses/root/datasets",
            "username": "API_KEY",
            "password": "",
            "metadata": {
                "specification": [],
                "transform-metadata": [
                    {
                        "name": "dataverse.json",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-dataset-xml-v5.xsl",
                        "target": "repo"

                    },
                    {
                        "name": "files.json",
                        "transformer-url": "http://localhost:1745/transform/faircore4eosc-form-metadata-to-dataverse-file-v1.xsl",
                        "target": "repo"

                    }
                ]
            },
            "input": {
                "from": "swh-staging-api",
                "type": "JSON",
                "object-name": "metadata"
            }
        },
        {
            "target-repo-name": "swh-staging-sword",
            "target-repo-display-name": "Software Heritage - SWORD2",
            "bridge-module-class": "SwhSwordIngester",
            "base-url": "https://deposit.staging.swh.network",
            "target-url": "https://deposit.staging.swh.network/1/",
            "username": "access_token",
            "password": "",
            "metadata": {
                "specification": [],
                "transform-metadata": [
                    {
                        "name": "atom.xml",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-dataset-xml-v5.xsl",
                        "target": "repo"

                    }
                ]
            },
            "input": {
                "from": "dataverse-dev",
                "type": "JSON",
                "object-name": "metadata"
            }
        }
    ],
    "file-conversions": []
}

json_data_ohsmart = '''{
    "assistant-config-name": "new-local.ssh.datastations.nl",
    "description": "",
    "app-name": "ohsmart",
    "app-config-url": "https://",
    "targets": [
        {
            "repo-name": "demo.ssh.datastations.nl",
            "repo-display-name": "SSH Datastation",
            "bridge-module-class": "DansSwordDepositor",
            "base-url": "https://demo.ssh.datastations.nl",
            "target-url": "https://demo.sword2.ssh.datastations.nl/collection/1",
            "username": "API_KEY",
            "password": "",
            "metadata": {
                "specification": [
                    "https://raw1.githubusercontent.com/IQSS/dataverse/master/scripts/api/data/metadatablocks/citation.tsv",
                    "https://github.com/DANS-KNAW/dd-dtap/blob/master/provisioning/files/custom-metadata-blocks/archaeology_specific_metadata.tsv"
                ],
                "transformed-metadata": [
                    {
                        "name": "dataset.xml",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-dataset-xml-v5.xsl",
                        "target": "repo"
                    },
                    {
                        "name": "files.xml",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-files-xml-v1.xsl",
                        "target": "repo"
                    },
                    {
                        "name": "__generated__form-metadata-original.json",
                        "mimetype": "application/json",
                        "restricted": true
                    },
                    {
                        "name": "__generated__form-metadata-clean-all.json",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-json-all-v1.xsl",
                        "target": "file",
                        "restricted": true
                    },
                    {
                        "name": "__generated__form-metadata-private.json",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-json-private-v1.xsl",
                        "target": "file",
                        "restricted": true
                    },
                    {
                        "name": "__generated__form-metadata-private.txt",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-text-private-v1.xsl",
                        "target": "file",
                        "restricted": true
                    },
                    {
                        "name": "__generated__form-metadata-public.json",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-json-public-v1.xsl",
                        "target": "file",
                        "restricted": false
                    },
                    {
                        "name": "__generated__form-metadata-public.txt",
                        "transformer-url": "http://localhost:1745/transform/ohsmart-form-metadata-to-text-public-v1.xsl",
                        "target": "file",
                        "restricted": false
                    }
                ]
            }
        }
    ],
    "file-conversions": [
        {
            "origin-type": "mov",
            "target-type": "mp4",
            "conversion-url": "https://"
        },
        {
            "origin-type": "mp4",
            "target-type": "mp3",
            "conversion-url": "https://"
        }
    ]
}
'''
xx = json.loads(json_data_ohsmart)


def main():
    product_instance = Model.model_validate(json_data_ohsmart)
    print(product_instance.model_dump_json(by_alias=True, indent=4))


if __name__ == "__main__":
    main()
